#!/bin/bash

# These need to be configured for the desired environment
BUILDROOTVER=2011.05
KERNELVER=2.6.39.4
UNIONFSVER=2.5.10


# Helper Vars
VERSION=`cat buildver`
ROOTDIR=${PWD}
UNIONFSPATCH=unionfs-${UNIONFSVER}_for_${KERNELVER}.diff
BUILDROOTSRC=${ROOTDIR}/src/buildroot-${BUILDROOTVER}.tar.bz2
IMAGES=${ROOTDIR}/buildroot/output/images
TMPDIR=${ROOTDIR}/tmp

checklink()
{
	if [ ! -h ${ROOTDIR}/buildroot ]
	then
		echo "Error, ${ROOTDIR}/buildroot link does not exist. Run $0 unpack"
		exit 1
	fi
}

mklink()
{
	ln -s buildroot-${BUILDROOTVER} buildroot
}

makecf()
{
    mkdir vm > /dev/null 2>&1
    qemu-img create -f raw vm/cf.img 32M
    losetup /dev/loop0 vm/cf.img
    echo -e  "n\np\n1\n1\n\nt\n6\na\n1\nw\n" | fdisk /dev/loop0
    losetup -d /dev/loop0
    losetup -o 512 /dev/loop0 vm/cf.img
    mkfs -t msdos /dev/loop0
    syslinux --install /dev/loop0
    mkdir vm/mnt
    sudo mount -t msdos /dev/loop0 vm/mnt
    sudo cp cf/* vm/mnt/
    sudo umount /dev/loop0
    losetup -d /dev/loop0
    rm -rf vm/mnt/
}

makefw()
{
    mkdir -p ${TMPDIR}/firmware
    if [ -f ${IMAGES}/bzImage ] && [ -f ${IMAGES}/rootfs.initramfs ]
    then
        cp ${IMAGES}/bzImage ${IMAGES}/rootfs.initramfs ${TMPDIR}/firmware
        cp ${ROOTDIR}/cf/syslinux.cfg ${TMPDIR}/firmware
        cd ${TMPDIR}/firmware
        tar cvfz ${ROOTDIR}/alixdev-bin-0.${VERSION}.tgz *
    else
        echo "Error, missing source file"
        exit 1
    fi
}

case $1 in
	get)
        	if [ ! -d src ]
        	then
            		mkdir src
        	fi
		if [ ! -f src/buildroot-${BUILDROOTVER}.tar.bz2 ]
		then
			cd src
			wget http://buildroot.uclibc.org/downloads/buildroot-${BUILDROOTVER}.tar.bz2
		fi
            cd src
        	wget http://download.filesystems.org/unionfs/unionfs-2.x-latest/${UNIONFSPATCH}.gz
        	gunzip ${UNIONFSPATCH}.gz
		;;
	checklink)
		checklink
		echo "Link Ok"
		;;
	unpack)
		if [ ! -f $BUILDROOTSRC ]
		then
			$0 get
		fi
		tar xvfj ${ROOTDIR}/src/buildroot-${BUILDROOTVER}.tar.bz2
		mklink
		;;
	cpconfig)
		cp -v ${ROOTDIR}/config/buildroot-${BUILDROOTVER}.config ${ROOTDIR}/buildroot-${BUILDROOTVER}/.config
		;;
	backup)
		cp -v ${ROOTDIR}/buildroot-${BUILDROOTVER}/.config ${ROOTDIR}/config/buildroot-${BUILDROOTVER}.config
		cp -v ${ROOTDIR}/buildroot/output/build/linux-${KERNELVER}/.config ${ROOTDIR}/config/linux-${KERNELVER}-alix-unionfs
		;;
	patch)
		PATCH=${ROOTDIR}/src/unionfs-${UNIONFSVER}_for_${KERNELVER}.diff.gz
		if [ ! -f ${PATCH} ]
		then
			echo "Cannot find ${PATCH}"
			exit 1
		else
			cd ${ROOTDIR}/buildroot/output/build/linux-${KERNELVER}
			zcat ${PATCH} | patch -p1
		fi
		;;
	build)
		let VERSION+=1
		echo -e "\nALIXDEV Build ${VERSION}\n" > ${ROOTDIR}/skeleton/etc/issue
        cp ${ROOTDIR}/skeleton/etc/issue ${ROOTDIR}/buildroot/output/target/etc/
		echo ${VERSION} > buildver
        if [ ! -f ${ROOTDIR}/buildroot/.config ]
        then
            echo "Config not found, will copy..."
            $0 cpconfig
        fi
		(cd buildroot ; make all | tee ../build.log)
		;;
    makefw)
        makefw
        ;;
	runvm)
        if [ ! -f vm/cf.img ]
        then
            makecf
        fi
		qemu -cpu pentium -kernel ${IMAGES}/bzImage -initrd ${IMAGES}/rootfs.initramfs -serial stdio -net nic,vlan=1 -net user,vlan=1 -hda ${ROOTDIR}/vm/cf.img
		;;
	*)
		echo "Error, unknown function $1"
		;;
esac


